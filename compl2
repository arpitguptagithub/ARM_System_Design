
class HBSTNode {
    public int key;
    public HBSTNode left;
    public HBSTNode right;
    public int height;

    method HBSTNode(int k) {
        key = k;
        left = right = null;
        height = 1;  // New node is initially added at height 1
    }
}

class HeightBalancedSearchTree {
    // Helper function to get the height of the node
    method height(HBSTNode node): int {
        IF (node == null) {
            return 0;
        }
        return node.height;
    }

    // Helper function to get the balance factor of the node
    method getBalance(HBSTNode node): int {
        IF (node == null) {
            return 0;
        }
        return height(node.left) - height(node.right);
    }

    // Right rotation function
    method rightRotate(HBSTNode y): HBSTNode {
        HBSTNode x = y.left;
        HBSTNode T2 = x.right;

        // Perform rotation
        x.right = y;
        y.left = T2;

        // Update heights
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        // Return new root
        return x;
    }

    // Left rotation function
    method leftRotate(HBSTNode x): HBSTNode {
        HBSTNode y = x.right;
        HBSTNode T2 = y.left;

        // Perform rotation
        y.left = x;
        x.right = T2;

        // Update heights
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        // Return new root
        return y;
    }

    // Insert a node into the tree
    method insert(HBSTNode node, int key): HBSTNode {
        IF (node == null) {
            return new HBSTNode(key);
        }

        IF (key < node.key) {
            node.left = insert(node.left, key);
        } ELSE IF (key > node.key) {
            node.right = insert(node.right, key);
        } ELSE {
            return node;  // Duplicate keys are not allowed in the BST
        }

        // Update the height of the ancestor node
        node.height = 1 + max(height(node.left), height(node.right));

        // Get the balance factor to check if this node became unbalanced
        int balance = getBalance(node);

        // If the node becomes unbalanced, there are 4 cases

        // Left Left Case
        IF (balance > 1 && key < node.left.key) {
            return rightRotate(node);
        }

        // Right Right Case
        IF (balance < -1 && key > node.right.key) {
            return leftRotate(node);
        }

        // Left Right Case
        IF (balance > 1 && key > node.left.key) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        // Right Left Case
        IF (balance < -1 && key < node.right.key) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        // Return the unchanged node pointer
        return node;
    }

    // Find the node with the minimum key value (used in deletion)
    method minValueNode(HBSTNode node): HBSTNode {
        HBSTNode current = node;

        // Loop to find the leftmost leaf
        WHILE (current.left != null) {
            current = current.left;
        }

        return current;
    }

    // Delete a node from the tree
    method delete(HBSTNode root, int key): HBSTNode {
        // Perform standard BST deletion
        IF (root == null) {
            return root;
        }

        IF (key < root.key) {
            root.left = delete(root.left, key);
        } ELSE IF (key > root.key) {
            root.right = delete(root.right, key);
        } ELSE {
            // Node with only one child or no child
            IF ((root.left == null) || (root.right == null)) {
                HBSTNode temp = (root.left != null) ? root.left : root.right;

                // No child case
                IF (temp == null) {
                    temp = root;
                    root = null;
                } ELSE {  // One child case
                    *root = *temp;  // Copy the contents of the non-empty child
                }
                free(temp);
            } ELSE {
                // Node with two children
                HBSTNode temp = minValueNode(root.right);
                root.key = temp.key;  // Copy the inorder successor's key
                root.right = delete(root.right, temp.key);  // Delete the inorder successor
            }
        }

        // If the tree had only one node, return
        IF (root == null) {
            return root;
        }

        // Update the height of the current node
        root.height = max(height(root.left), height(root.right)) + 1;

        // Get the balance factor
        int balance = getBalance(root);

        // If the node becomes unbalanced, there are 4 cases

        // Left Left Case
        IF (balance > 1 && getBalance(root.left) >= 0) {
            return rightRotate(root);
        }

        // Left Right Case
        IF (balance > 1 && getBalance(root.left) < 0) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }

        // Right Right Case
        IF (balance < -1 && getBalance(root.right) <= 0) {
            return leftRotate(root);
        }

        // Right Left Case
        IF (balance < -1 && getBalance(root.right) > 0) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }

        return root;
    }

    // Search for a key in the tree
    method search(HBSTNode root, int key): HBSTNode {
        IF (root == null || root.key == key) {
            return root;
        }

        IF (key < root.key) {
            return search(root.left, key);
        }

        return search(root.right, key);
    }

    // Inorder traversal to print the tree
    method inorder(HBSTNode root) {
        IF (root != null) {
            inorder(root.left);
            print(root.key + " ");
            inorder(root.right);
        }
    }
}

function main() {
    HeightBalancedSearchTree hbst = new HeightBalancedSearchTree();
    HBSTNode root = null;

    // Insert elements into the HBST
    root = hbst.insert(root, 10);
    root = hbst.insert(root, 20);
    root = hbst.insert(root, 30);
    root = hbst.insert(root, 40);
    root = hbst.insert(root, 50);
    root = hbst.insert(root, 25);

    print("Inorder traversal of the HBST:");
    hbst.inorder(root);
    print("\n");

    // Search for an element
    HBSTNode searchResult = hbst.search(root, 30);
    IF (searchResult != null) {
        print("Element 30 found in the tree.");
    } ELSE {
        print("Element 30 not found in the tree.");
    }

    // Delete an element from the HBST
    root = hbst.delete(root, 20);
    print("Inorder traversal after deleting 20:");
    hbst.inorder(root);
    print("\n");
}